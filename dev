#!/bin/bash
# Helper script for commands related to the CS Unplugged repository.
#
# Notes:
#  - Changes to template only require user to refresh browser.
#  - Changes to static files require the 'static' command to be run.
#  - Changes to Python code are detected by gunicorn and should take effect
#    on the server after a few seconds.
#
# Future plans:
#  - Start systems when a command is given (for example: 'static') when the
#    development system has not yet been started.
#  - When 'start' is run open website in default browser without creating
#    new terminal prompt.

set -e

ERROR='\033[0;31m'
SUCCESS='\033[0;32m'
CODE='\033[0;36m'
NC='\033[0m' # No Color

cmd_helps=()

defhelp() {
  local command="${1?}"
  local text="${2?}"
  local help_str
  help_str="$(printf '   %-24s %s' "$command" "$text")"
  cmd_helps+=("$help_str")
}

# Print out help information
cmd_help() {
  echo "Script for performing tasks related to the CS Unplugged repository."
  echo
  echo "Usage: ./dev [COMMAND]"
  echo "Replace [COMMAND] with a word from the list below."
  echo
  echo "COMMAND list:"
  for str in "${cmd_helps[@]}"; do
    echo -e "$str"
  done
}
defhelp help 'View all help.'

# Start development environment
cmd_start() {
  echo "Creating systems..."
  docker-compose -f docker-compose.local.yml up -d
  # Alert user that system is ready
  echo -e "\n${SUCCESS}System is up!${NC}"
  echo -e "Run the command ${CODE}./dev update${NC} to load content."
}
defhelp start 'Start development environment.'

# Stop development environment
cmd_end() {
  echo "Stopping systems..."
  docker-compose -f docker-compose.local.yml down
}
defhelp end 'Stop development environment.'

cmd_restart() {
  cmd_end
  cmd_start
}
defhelp restart 'Stop and then restart development environment.'

# Update all content
cmd_update() {
  cmd_static

  echo ""
  cmd_migrate

  echo ""
  cmd_updatedata

  cmd_rebuild_index
  echo ""
  cmd_makeresourcethumbnails
  cmd_collect_static
  echo ""
  echo -e "\n${SUCCESS}Content is loaded!${NC}"
  echo "Open your preferred web browser to the URL 'localhost'"
}
defhelp update 'Run Django migrate and updatedata commands and build static files.'

# Run Django makemigrations command
cmd_makemigrations() {
  echo "Creating database migrations..."
  docker-compose -f docker-compose.local.yml run --rm django python ./manage.py makemigrations --no-input
}
defhelp makemigrations 'Run Django makemigrations command.'

# Run Django migrate command
cmd_migrate() {
  echo "Applying database migrations..."
  docker-compose -f docker-compose.local.yml run --rm django python ./manage.py migrate
}
defhelp migrate 'Run Django migrate command.'

# Reboot Django Docker container
cmd_reboot_django() {
  echo "Rebooting Django container..."
  docker-compose -f docker-compose.local.yml restart django
}
defhelp reboot_django 'Reboot Django container.'

# Run Django updatedata command
cmd_updatedata() {
  echo "Loading content..."
  docker-compose -f docker-compose.local.yml run --rm django python ./manage.py updatedata
}
defhelp updatedata 'Load content into database.'

# Update and collect static files
cmd_update_static() {
  docker-compose -f docker-compose.local.yml up node
  echo ""
  docker-compose -f docker-compose.local.yml run --rm django python manage.py collectstatic --no-input --clear
  echo ""
  echo -e "\n${SUCCESS}Static files are updated!${NC}"
}
defhelp update_static 'Update static files.'

# Run Django command rebuild_index
cmd_rebuild_index() {
  echo "Rebuilding search index..."
  docker-compose -f docker-compose.local.yml run --rm django python ./manage.py rebuild_index --noinput
}
defhelp rebuild_index "Run Django rebuild_index command."

# Run Django makeresourcethumbnails command
cmd_make_resource_thumbnails() {
  echo "Creating thumbnails for resource PDFs..."
  docker-compose -f docker-compose.local.yml run --rm django python ./manage.py makeresourcethumbnails
}
defhelp makeresourcethumbnails 'Run Django makeresourcethumbnails command.'

# Run Django makeresources command
cmd_make_resources() {
  echo "Creating static resource PDFs..."
  docker-compose -f docker-compose.local.yml run --rm django python ./manage.py makeresources
}
defhelp makeresources 'Run Django makeresources command.'

# Build Docker images
cmd_build() {
  echo "Building Docker images..."
  docker-compose -f docker-compose.local.yml build
}
defhelp build 'Build or rebuild Docker images.'

# View Docker logs
cmd_logs() {
  echo "Building Docker images..."
  docker-compose -f docker-compose.local.yml logs --timestamps "$@"
}
defhelp build 'View logs.'

# --- Core script logic -------------------------------------------------------

silent() {
  "$@" > /dev/null 2>&1
}

# If no command given
if [ $# -eq 0 ]; then
  echo -e "${ERROR}ERROR: This script requires a command!${NC}"
  cmd_help
  exit 1
fi
cmd="$1"
shift
if silent type "cmd_$cmd"; then
  "cmd_$cmd" "$@"
  exit $?
else
  echo -e "${ERROR}ERROR: Unknown command!${NC}"
  echo "Type './csu help' for available commands."
  exit 1
fi
